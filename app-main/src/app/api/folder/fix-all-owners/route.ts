import { getServerSession } from "next-auth";
import { authOptions } from "../../auth/[...nextauth]/route";
import { NextResponse } from "next/server";
import { supabaseAdmin } from "../../../../../lib/supabase";
import { isSuperAdmin } from "@/utils/roles/utils";

export async function POST(req: Request) {
  try {
    const session = await getServerSession(authOptions);

    if (!session?.user?.id) {
      return NextResponse.json({ error: "Non authentifi√©" }, { status: 401 });
    }

    // V√©rifier que l'utilisateur est super admin
    if (!isSuperAdmin(session.user)) {
      return NextResponse.json({ 
        error: "Acc√®s refus√©", 
        details: "Seuls les super-administrateurs peuvent effectuer cette op√©ration."
      }, { status: 403 });
    }

    console.log("üîß Correction globale des projets par le super admin:", session.user.id);

    // R√©cup√©rer tous les projets
    const { data: allFolders, error: foldersError } = await supabaseAdmin
      .from('Folder')
      .select('id, name, userCreatorId');

    if (foldersError) {
      console.error("Erreur r√©cup√©ration folders:", foldersError);
      return NextResponse.json({ error: "Erreur r√©cup√©ration projets" }, { status: 500 });
    }

    if (!allFolders || allFolders.length === 0) {
      return NextResponse.json({ 
        message: "Aucun projet trouv√© dans le syst√®me", 
        fixed: 0,
        total: 0
      });
    }

    let fixedCount = 0;
    let alreadyFixedCount = 0;
    const errors: string[] = [];

    for (const folder of allFolders) {
      try {
        // V√©rifier si le cr√©ateur est d√©j√† dans _FolderToUser
        const { data: existingRelation } = await supabaseAdmin
          .from('_FolderToUser')
          .select('*')
          .eq('A', folder.id)
          .eq('B', folder.userCreatorId)
          .single();

        if (!existingRelation) {
          // Ajouter le cr√©ateur au projet
          const { error: insertError } = await supabaseAdmin
            .from('_FolderToUser')
            .insert({
              A: folder.id,
              B: folder.userCreatorId,
            });

          if (!insertError) {
            console.log(`‚úÖ Cr√©ateur ajout√© au projet: ${folder.name} (Cr√©ateur: ${folder.userCreatorId})`);
            fixedCount++;
          } else {
            const errorMsg = `Erreur ajout cr√©ateur au projet ${folder.name} (${folder.userCreatorId}): ${insertError.message}`;
            console.error(`‚ùå ${errorMsg}`);
            errors.push(errorMsg);
          }
        } else {
          console.log(`üÜó Cr√©ateur d√©j√† membre du projet: ${folder.name}`);
          alreadyFixedCount++;
        }
      } catch (error) {
        const errorMsg = `Erreur lors du traitement du projet ${folder.name}: ${error}`;
        console.error(`‚ùå ${errorMsg}`);
        errors.push(errorMsg);
      }
    }

    const response = {
      message: `Correction globale termin√©e. ${fixedCount} projet(s) corrig√©(s) sur ${allFolders.length}`,
      fixed: fixedCount,
      alreadyFixed: alreadyFixedCount,
      total: allFolders.length,
      errors: errors.length > 0 ? errors : undefined,
      details: {
        fixed: fixedCount > 0 
          ? `${fixedCount} cr√©ateurs ont √©t√© ajout√©s √† leurs projets.`
          : "Aucune correction n√©cessaire.",
        alreadyFixed: `${alreadyFixedCount} projets √©taient d√©j√† correctement configur√©s.`,
        errors: errors.length > 0 
          ? `${errors.length} erreurs rencontr√©es lors de la correction.`
          : "Aucune erreur rencontr√©e."
      }
    };

    return NextResponse.json(response);

  } catch (error) {
    console.error("Erreur correction globale projets:", error);
    return NextResponse.json({ 
      error: "Erreur interne lors de la correction globale des projets",
      details: error instanceof Error ? error.message : "Erreur inconnue"
    }, { status: 500 });
  }
}
